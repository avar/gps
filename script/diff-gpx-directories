#!/usr/bin/env perl
use strict;
use warnings;

use Pod::Usage ();
use Getopt::Long ();

use Digest;
use Cwd qw(abs_path);

use Set::Object ();

=head1 NAME

diff-gpx-directories - meh

=head1 SYNOPSIS

    perl get-osm-gpx-tracks-for-user --debug --out-dir=tmp --download "Ævar Arnfjörð Bjarmason"
    perl diff-gpx-directories ~/src/gps/gpx tmp/

=cut

Getopt::Long::Parser->new(
    config => [ qw< bundling no_ignore_case no_require_order pass_through > ],
)->getoptions(
    'h|help'     => \my $help,
) or help();

help() if $help;
help() unless defined $ARGV[0] and defined $ARGV[1];
my ($dir_one, $dir_two) = map { abs_path($_) } @ARGV;

my %dir_one = dir_files_with_md5sum($dir_one);
my %dir_two = dir_files_with_md5sum($dir_two);

my @not_in_two = sort map { $dir_one{$_} } report_difference([keys %dir_one], [keys %dir_two]);
my @not_in_one = sort map { $dir_two{$_} } report_difference([keys %dir_two], [keys %dir_one]);

print STDERR "== Files in `$dir_two' not in `$dir_one':\n";
for my $not (@not_in_one) {
    print $not, "\n";
}

print STDERR "== Files in `$dir_one' not in `$dir_two':\n";
for my $not (@not_in_two) {
    print $not, "\n";
}

sub report_difference
{
    my ($x, $y) = @_;

    my $set_x = Set::Object->new(@$x);
    my $set_y = Set::Object->new(@$y);

    my @not_in_y = @{ $set_x - $set_y };
}

sub dir_files_with_md5sum
{
    my $dir = shift;
    my @files = grep { -f } glob "$dir/*";

    my %ret;
    for my $file (@files) {
        my $short_path = short_path($file);

        $ret{md5_file($file)} = $short_path;
    }

    return %ret;
}

# Opposite of abs_path(), I forgot what the real stdlib thingy to do this was
sub short_path
{
    my $abs_path = shift;
    my ($short_path) = $abs_path =~ m[^.*/(.*?)$];
    return $short_path;
}


sub md5_file
{
    my $file = shift;
    my $md5 = Digest->new("MD5");
    open my $mdfile, "<", $file or return;
    binmode $mdfile;
    $md5->addfile($mdfile);
    my $dig = $md5->hexdigest;
    close $mdfile;
    undef $md5;
    return $dig;
}

sub help
{
    my %arg = @_;

    Pod::Usage::pod2usage(
        -verbose => $arg{ verbose },
        -exitval => $arg{ exitval } || 0,
    );
}
