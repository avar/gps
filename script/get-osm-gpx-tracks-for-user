#!/usr/bin/env perl
use strict;
use warnings;

use Pod::Usage ();
use Getopt::Long ();

use WWW::Mechanize;
use URI::Escape;

use File::Spec::Functions qw(catfile);

=head1 NAME

get-osm-gpx-tracks-for-user - Get all the F<.gpx> tracks a given L<openstreetmap.org> user has uploaded

=head1 SYNOPSIS

    perl get-osm-gpx-tracks-for-user [--debug] "Ævar Arnfjörð Bjarmason"

=cut

Getopt::Long::Parser->new(
    config => [ qw< bundling no_ignore_case no_require_order pass_through > ],
)->getoptions(
    'h|help' => \my $help,
    'debug'       => \my $debug,
) or help();

help() if $help;

#
# main program
#

my $mech = WWW::Mechanize->new();

my $user = $ARGV[0];
my $user_esc =  uri_escape($user);
my $user_traces = "http://openstreetmap.org/user/$user_esc/traces";

warn "User traces: $user_traces" if $debug;

$mech->get( $user_traces );

my $num_pages = num_pages_from_links($mech);

# Some users e.g. "Bjarki Sigursveinsson" or "oasnethuasonehuahu" will
# show the public traces for *all* users
exit 1 if $num_pages > 500;

my @links;
for my $page (1 .. $num_pages) {
    warn "page $page for user $user" if $debug;
    $mech->get($user_traces . "/page/$page");

    push @links, gpx_links_on_page($mech);
}

for my $link (@links) {
    #use Data::Dump 'dump';
    #print dump $link;
    printf "%s\t%s\t%s\n", @$link{qw(trace trace_url text)};
}

sub trace_name_from_content {
    my $trace = shift;
    my $content = shift;

    #<a href="/user/%C3%86var%20Arnfj%C3%B6r%C3%B0%20Bjarmason/traces/335388">2009_03_15_Driving_on_Highway_1_from_Akureyri_to_Reykjavik.gpx</a>
    my ($name) = $content =~ m[<a href="/user/[^/]+/traces/$trace">(.+?\.gpx)</a>];

    return $name;
}

sub gpx_links_on_page
{
    my $mech = shift;
    my @links = $mech->links;
    my @gpx_link;

    for my $link (@links) {

        if ($link->url_abs =~ m[/traces/([0-9]+)$]) {
            push @gpx_link => {
                url  => $link->url_abs,
                text => trace_name_from_content($1, $mech->content),
                trace => $1,
                trace_url => "http://openstreetmap.org/trace/$1/data",
            };
        }

    }

    return @gpx_link;
}

sub num_pages_from_links
{
    my $mech = shift;
    my @links = $mech->links;
    my $pages = 1;

    for my $link (@links) {
        next unless ($link->url_abs . "") =~ m[/page/([0-9]+)$];

        $pages = $1 if $pages < $1;
    }

    return $pages;
}

sub help
{
    my %arg = @_;

    Pod::Usage::pod2usage(
        -verbose => $arg{ verbose },
        -exitval => $arg{ exitval } || 0,
    );
}
